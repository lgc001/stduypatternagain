策略模式的主要目的主要是将算法的定义和使用分开，也就是将算法的行为和环境分开，
将算法的定义放在专门的策略类中，每一个策略类封装一个实现算法。
而使用算法的环境中针对抽象策略编程，而不是针对实现编程，符合依赖倒置原则。

策略（Strategy）模式：定义一系列算法类，将每一个算法封装起来，并让它们可以相互替换。
策略模式让算法独立于使用它的客户而变化。它也被成为政策模式，是一种行为型模式。

策略模式包含以下3个角色：
（1）Context（环境类）：负责使用算法策略，其中维持了一个抽象策略类的引用实例。
（2）Strategy（抽象策略类）：所有策略类的父类，为所支持的策略算法声明了抽象方法。=> 既可以是抽象类也可以是接口
（3）ConcreteStrategy（具体策略类）：实现了在抽象策略类中声明的方法。

主要优点
　　（1）提供了对开闭原则的完美支持，用户可以在不修改原有系统的基础上选择具体算法或行为，也可以灵活地增加新的算法或行为。

　　（2）避免了多重的if-else条件选择语句，利于系统的维护。

　　（3）提供了一种算法的复用机制，不同的环境类可以方便地复用这些策略类。

4.2 主要缺点
　　（1）客户端需要知道所有的策略类，并自行决定使用哪一个策略 => 只适用于客户端了解所有策略算法的情况。

　　（2）将造成系统产生很多的具体策略类，任何细小的变化都将导致系统要增加一个具体策略类 => 类的个数也许会超出预期。

　　（3）无法在客户端同时使用多个策略类 => 客户端每次只能使用一个策略类。

4.3 应用场景
　　（1）如果一个系统要动态地在几种算法之间选择其中一种 => 那就快用策略模式吧骚年！

　　（2）如果有难以维护的多重if-else条件选择语句是为了实现对象的行为 => 那就快用策略模式吧骚年！

　　（3）不希望客户知道复杂的与算法有关的数据结构，可以将其封装到策略中 => 提高算法的保密性和安全性！