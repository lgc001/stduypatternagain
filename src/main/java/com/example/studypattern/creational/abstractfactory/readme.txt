抽象工厂与工厂方法最大的区别就在于，工厂方法模式针对的是一个产品等级结构，
而抽象工厂模式需要面对多个产品等级结构，一个工厂等级结构可以负责多个不同产品等级中的产品对象的创建。

抽象工厂模式为创建一组对象提供了一种方案，与工厂方法模式相比，抽象工厂模式中的具体工厂不只是创建一种产品，它负责创建一族产品。

抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。
抽象工厂模式又称为Kit模式，它是一种对象创建型模式。

　　（1）Abstract Factory (抽象工厂角色)：声明了一组用于创建一族产品的方法，每一个方法对应一种产品。
　　（2）Concrete Factory (具体工厂角色)：实现了在抽象工厂中声明的创建产品的方法，生成一组具体产品，这些产品构成了一个产品族。
　　（3）Abstract Product (抽象产品角色)：为每种产品声明接口，在抽象产品中声明了所有的业务方法。
　　（4）Concrete Product (具体产品角色)：定义具体工厂生产的具体产品对象，实现在抽象产品接口中声明的业务方法。

4.1 抽象工厂模式主要优点
　　（1）隔离了具体类的生成，使得客户并不需要知道什么被创建。因为这种隔离，因此更换一个具体工厂就变得相对容易。

　　（2）当一个产品族中的多个对象被设计称一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。

　　（3）增加新的产品族很方便，无需修改已有系统，符合开闭原则。

4.2 抽象工厂模式主要缺点
　　增加新的产品等级结构很麻烦，增加新的产品等级结构很麻烦，增加新的产品等级结构很麻烦！！！（重要的事情说三遍）因为需要对原有系统进行较大的修改，甚至需要修改抽象层代码，这必然会带来较大的不便，在这个角度，它违背了开闭（对扩展开放，对修改封闭）原则。

　　想想，如果我们需要为单选按钮（RadioButton）提供不同皮肤的风格化显示，会发现无论选择哪种皮肤，单选按钮都显得“格格不入”。

4.3 抽象工厂模式应用场景
　　（1）用户无须关心对象的创建过程，需要将对象的创建和使用解耦 -> 这是所有工厂模式的使用前提

　　（2）系统中有多余一个的产品族，而每次都只使用其中的某一种产品族。 -> 可以通过配置文件等方式来使得用户可以动态地改变产品族，也可以很方便地增加新的产品族

　　（3）产品等级结构稳定！设计完成之后，不会向系统中增加新的产品等级结构或删除已有产品等级结构。 -> 并不太符合开闭原则