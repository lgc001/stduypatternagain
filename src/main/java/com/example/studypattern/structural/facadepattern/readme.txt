在软件开发中，有时候为了完成一项较为复杂的功能，一个类需要和多个其他业务类交互，
而这些需要交互的业务类经常会作为一个完整的整体出现，由于涉及的类比较多，导致使用时代码较为复杂，
此时，特别需要一个类似服务员一样的角色，由他来负责和多个业务类进行交互，而使用这些业务类的类只需要和该类进行交互即可。
外观模式通过引入一个新的外观类来实现该功能，外观类充当了软件系统中的“服务员”，
它为多个业务类的调用提供了一个统一的入口，简化了类与类之间的交互。

外观（Facade）模式：外部与一个子系统的通信通过一个统一的外观角色进行，为子系统中的一组接口提供一个一致的入口，
外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。

根据单一职责原则，在软件中将一个系统划分为若干个子系统有利于降低整个系统的复杂性，
一个常见的设计目标就是使客户类与子系统之间的通信和相互依赖关系达到最小，而达到该目标的途径之一就是引入一个外观（Facade）角色，
它为子系统的访问提供了一个简单而单一的入口。

5.1 主要优点
　　（1）对客户端屏蔽了子系统组件，减少了客户端需要处理的对象数量并且使得子系统使用起来更加容易。

　　（2）实现了子系统与客户端之间松耦合。

　　（3）提供了一个访问子系统的统一入口，并不影响客户端直接使用子系统。

5.2 应用场景
　　（1）想要为访问一系列复杂的子系统提供一个统一的简单入口 => 使用外观模式吧！

　　（2）客户端与多个子系统之间存在很大的依赖性，引入外观类可以将子系统和客户端解耦

　　（3）在层次化结构中，可以使用外观模式定义系统中每一层的入口，层与层之间不直接产生联系 => 通过外观类建立联系，降低层与层之间的耦合度！